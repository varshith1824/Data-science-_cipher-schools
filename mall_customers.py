# -*- coding: utf-8 -*-
"""Mall_Customers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hicswy-trFaHDHFfMFKqh65qc4M57Axl
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
!pip install scikit-learn  # Install the scikit-learn library
from sklearn.cluster import KMeans  # Correct import statement
from sklearn.preprocessing import StandardScaler

"""#EDA

"""

#Read data
path = "/content/drive/MyDrive/dataset/Mall_Customers.csv"
dataset = pd.read_csv(path)
dataset.head(5)

# Check dimensions
print("Dataset shape:", dataset.shape)

# Display first few rows
print(dataset.head())

# Check data types
print(dataset.dtypes)

# Summary statistics
print(dataset.describe())

# Check for missing values
print(dataset.isnull().sum())

# Example: Histogram of a numerical column
plt.figure(figsize=(8, 6))
sns.histplot(dataset['Annual Income (k$)'], bins=20, kde=True)
plt.title('Distribution of Numerical Column')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

dataset.columns

#  Pair plot to visualize relationships between numerical variables
# dataset=dataset.drop('CustomerID',axis=1)
# sns.pairplot(dataset,hue='Genre')
sns.pairplot(dataset[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])
plt.show()

#Correlation matrix
correlation_matrix = dataset[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].corr()
print(correlation_matrix)

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

#  Box plot of a categorical variable
columns =['Age', 'Annual Income (k$)','Spending Score (1-100)']
for i in columns:
  # plt.figure()
  sns.boxplot(data=dataset,x='Genre', y= dataset[i])
  plt.show()

"""#Kmeans Clustering"""

# Select features for clustering
X = dataset[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#KMeans Clustering
# Determine the optimal number of clusters using the elbow method
inertia_scores=[]
for i in range(1,11):
  kmeans=KMeans(n_clusters=i)
  kmeans.fit(dataset[['Annual Income (k$)']])
  inertia_scores.append(kmeans.inertia_)

inertia_scores

plt.plot(range(1,11),inertia_scores)

# Plot the elbow method
plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), inertia_scores, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('inertia_scores')
plt.show()

# Choose the optimal number of clusters (for example, 5)
optimal_clusters = 5
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)
dataset['Cluster'] = kmeans.fit_predict(X_scaled)

# Export the dataset with cluster labels to a CSV file
dataset.to_csv('customer_segmentation.csv', index=False)